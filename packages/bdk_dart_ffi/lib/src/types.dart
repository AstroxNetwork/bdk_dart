// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class Secp256k1FromSeedReq {
  final Uint8List seed;

  const Secp256k1FromSeedReq({
    required this.seed,
  });

  @override
  int get hashCode => seed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1FromSeedReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed;
}

class Secp256k1RecoverReq {
  final Uint8List messagePreHashed;
  final Uint8List signatureBytes;
  final int? chainId;

  const Secp256k1RecoverReq({
    required this.messagePreHashed,
    required this.signatureBytes,
    this.chainId,
  });

  @override
  int get hashCode =>
      messagePreHashed.hashCode ^ signatureBytes.hashCode ^ chainId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1RecoverReq &&
          runtimeType == other.runtimeType &&
          messagePreHashed == other.messagePreHashed &&
          signatureBytes == other.signatureBytes &&
          chainId == other.chainId;
}

class Secp256k1ShareSecretReq {
  final Uint8List seed;
  final Uint8List publicKeyRawBytes;

  const Secp256k1ShareSecretReq({
    required this.seed,
    required this.publicKeyRawBytes,
  });

  @override
  int get hashCode => seed.hashCode ^ publicKeyRawBytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1ShareSecretReq &&
          runtimeType == other.runtimeType &&
          seed == other.seed &&
          publicKeyRawBytes == other.publicKeyRawBytes;
}

class Secp256k1SignWithRngReq {
  final Uint8List msg;
  final Uint8List privateBytes;

  const Secp256k1SignWithRngReq({
    required this.msg,
    required this.privateBytes,
  });

  @override
  int get hashCode => msg.hashCode ^ privateBytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1SignWithRngReq &&
          runtimeType == other.runtimeType &&
          msg == other.msg &&
          privateBytes == other.privateBytes;
}

class Secp256k1SignWithSeedReq {
  final Uint8List msg;
  final Uint8List seed;

  const Secp256k1SignWithSeedReq({
    required this.msg,
    required this.seed,
  });

  @override
  int get hashCode => msg.hashCode ^ seed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1SignWithSeedReq &&
          runtimeType == other.runtimeType &&
          msg == other.msg &&
          seed == other.seed;
}

class Secp256k1VerifyReq {
  final Uint8List messageHash;
  final Uint8List signatureBytes;
  final Uint8List publicKeyBytes;

  const Secp256k1VerifyReq({
    required this.messageHash,
    required this.signatureBytes,
    required this.publicKeyBytes,
  });

  @override
  int get hashCode =>
      messageHash.hashCode ^ signatureBytes.hashCode ^ publicKeyBytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Secp256k1VerifyReq &&
          runtimeType == other.runtimeType &&
          messageHash == other.messageHash &&
          signatureBytes == other.signatureBytes &&
          publicKeyBytes == other.publicKeyBytes;
}

class SignatureFFI {
  /// This is the DER-encoded public key.
  final Uint8List? publicKey;

  /// The signature bytes.
  final Uint8List? signature;

  const SignatureFFI({
    this.publicKey,
    this.signature,
  });

  @override
  int get hashCode => publicKey.hashCode ^ signature.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SignatureFFI &&
          runtimeType == other.runtimeType &&
          publicKey == other.publicKey &&
          signature == other.signature;
}
